; NOTE: opcodes.asm is a file that can be autogenerated by opcode_assigner.py
#include "minimal_opcodes.asm"
#once
NRM_MSB = 0x00
EXT_MSB = 0x01

#fn msb(val) => val[15:8]
#fn lsb(val) => val[7:0]

#fn opcode(id) => {
    msb(id) == NRM_MSB ?
        lsb(id)
    : (msb(id) == EXT_MSB ?
        assert(0 != 0)
    : (assert(0 != 0))
    )
}

#ruledef bw8cpu {
    brk                             => opcode(OP_BRK)
    nop                             => opcode(OP_NOP)

    clc                             => opcode(OP_CLC)

    mov a, b                        => opcode(OP_MOV_A_B)
    mov a, c                        => opcode(OP_MOV_A_C)
    mov a, d                        => opcode(OP_MOV_A_D)
    mov b, a                        => opcode(OP_MOV_B_A)
    mov b, c                        => opcode(OP_MOV_B_C)
    mov b, d                        => opcode(OP_MOV_B_D)
    mov c, a                        => opcode(OP_MOV_C_A)
    mov c, b                        => opcode(OP_MOV_C_B)
    mov c, d                        => opcode(OP_MOV_C_D)
    mov d, a                        => opcode(OP_MOV_D_A)
    mov d, b                        => opcode(OP_MOV_D_B)
    mov d, c                        => opcode(OP_MOV_D_C)
    mov a, dp                       => opcode(OP_MOV_A_DP)
    mov dp, a                       => opcode(OP_MOV_DP_A)

    load a, #{imm: i8}              => opcode(OP_LOAD_A_IMM)    @ imm
    load b, #{imm: i8}              => opcode(OP_LOAD_B_IMM)    @ imm
    load c, #{imm: i8}              => opcode(OP_LOAD_C_IMM)    @ imm
    load d, #{imm: i8}              => opcode(OP_LOAD_D_IMM)    @ imm

    adc a, b                        => opcode(OP_ADC_A_B)
    and a, b                        => opcode(OP_AND_A_B)
}
